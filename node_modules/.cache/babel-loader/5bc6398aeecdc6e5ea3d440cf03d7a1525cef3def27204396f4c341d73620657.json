{"ast":null,"code":"import io from 'socket.io-client';\nexport default {\n  data() {\n    return {\n      messages: [],\n      messageInput: '',\n      usernameInput: '',\n      username: '',\n      socket: null\n    };\n  },\n  methods: {\n    beforeMessages() {\n      this.socket = io('localhost:3000');\n      this.socket.on('before messages', beforeMessages => {\n        this.messages = beforeMessages.map(message => ({\n          ...message,\n          active: true,\n          id: uniqueId()\n        }));\n      });\n    },\n    enterUsername() {\n      if (this.usernameInput.trim() != '') {\n        this.username = this.usernameInput;\n        // 최초 한 번만 리스너 등록\n        if (!this.chatMessageListener) {\n          this.chatMessageListener = data => {\n            this.messages.unshift({\n              ...data,\n              active: true,\n              id: uniqueId()\n            });\n            this.msgBottom();\n          };\n          this.socket.on('chat message', this.chatMessageListener);\n        }\n        this.socket.emit('new user', this.username);\n        this.sendMessage();\n      } else if (this.usernameInput.trim() == '') {\n        alert(\"닉네임을 입력해주세요.\");\n      }\n    },\n    sendMessage() {\n      if (this.messageInput.trim() != '' && this.username.trim() != '') {\n        this.socket.emit('chat message', {\n          message: this.messageInput,\n          username: this.username,\n          id: uniqueId()\n        });\n        this.messageInput = '';\n        this.usernameInput = '';\n      } else if (this.messageInput.trim() == '') {\n        alert(\"내용을 입력해주세요.\");\n      }\n    },\n    msgBottom() {\n      let div = document.getElementById(\"chat-messages\");\n      div.scrollTop = div.scrollHeight;\n    }\n  },\n  mounted() {\n    this.beforeMessages();\n  }\n};\nfunction uniqueId() {\n  return '_' + Math.random().toString(36).substr(2, 9);\n}","map":{"version":3,"names":["io","data","messages","messageInput","usernameInput","username","socket","methods","beforeMessages","on","map","message","active","id","uniqueId","enterUsername","trim","chatMessageListener","unshift","msgBottom","emit","sendMessage","alert","div","document","getElementById","scrollTop","scrollHeight","mounted","Math","random","toString","substr"],"sources":["/Users/jongchanha/Desktop/vuemain/radiation/radiation/src/components/UserComment.vue"],"sourcesContent":["<template>\n  <div class=\"col-12 container\">\n    <h2 class=\"header\">실시간 댓글</h2>\n    <div class=\"col-12 chat_container\">\n      <TransitionGroup name=\"list\" id=\"chat-messages\" tag=\"ul\">\n        <li v-for=\"message in messages\" :key=\"message.id\" class=\"col-12 chating\" :class=\"{ 'active': message.active }\">\n          <strong>{{ message.username }}:</strong> {{ message.message }}\n        </li>\n      </TransitionGroup>\n    </div>\n    <form @submit.prevent=\"enterUsername\" class=\"input_form\">\n      <input v-model=\"usernameInput\" type=\"text\" autocomplete=\"off\" class=\"form-control\" id=\"user_name\" placeholder=\"Username\" aria-label=\"Username\">\n      <input v-model=\"messageInput\" type=\"text\" id=\"user_message\" autocomplete=\"off\" class=\"form-control\" placeholder=\"Usermessage\" aria-label=\"Usermessage\">\n      <button class=\"btn btn-primary submit\" type=\"submit\"></button>\n    </form>\n  </div>\n</template>\n  \n<script>\nimport io from 'socket.io-client';\nexport default {\n  data() {\n    return {\n      messages: [],\n      messageInput: '',\n      usernameInput: '',\n      username: '',\n      socket: null\n    };\n  },\n  methods: {\n    beforeMessages() {\n      this.socket = io('localhost:3000');\n\n      this.socket.on('before messages', (beforeMessages) => {\n        this.messages = beforeMessages.map((message) => ({ ...message, active: true, id: uniqueId() }));\n      });\n    },\n    enterUsername() {\n      if (this.usernameInput.trim() != '') {\n        this.username = this.usernameInput;\n        // 최초 한 번만 리스너 등록\n        if (!this.chatMessageListener) {\n          this.chatMessageListener = (data) => {\n            this.messages.unshift({ ...data, active: true, id: uniqueId() });\n            this.msgBottom();\n          };\n\n          this.socket.on('chat message', this.chatMessageListener);\n        }\n        this.socket.emit('new user', this.username);\n        this.sendMessage();\n      } else if (this.usernameInput.trim() == '') {\n        alert(\"닉네임을 입력해주세요.\");\n      }\n    },\n    sendMessage() {\n      if (this.messageInput.trim() != '' && this.username.trim() != '') {\n        this.socket.emit('chat message', { message: this.messageInput, username: this.username, id: uniqueId() });\n        this.messageInput = '';\n        this.usernameInput = '';\n      } else if (this.messageInput.trim() == '') {\n        alert(\"내용을 입력해주세요.\");\n      }\n\n    },\n    msgBottom() {\n      let div = document.getElementById(\"chat-messages\");\n      div.scrollTop = div.scrollHeight;\n    },\n  },\n  mounted() {\n    this.beforeMessages();\n  }\n};\n\nfunction uniqueId() {\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n</script>\n  \n   \n<style>\n.list-move,\n/* 움직이는 엘리먼트에 트랜지션 적용 */\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.5s ease;\n}\n\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n\n.list-leave-active {\n  position: absolute;\n}\n.container{\n  margin-top: 100px;\n}\n.header {\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n#chat-messages::-webkit-scrollbar {\n  width: 10px;\n}\n\n#chat-messages::-webkit-scrollbar-thumb {\n  background: rgb(6, 46, 156);\n  /* 스크롤바 색상 */\n  border-radius: 10px;\n  /* 스크롤바 둥근 테두리 */\n}\n\n#chat-messages::-webkit-scrollbar-track {\n  background: rgba(220, 20, 60, .1);\n  /*스크롤바 뒷 배경 색상*/\n}\n\n.chat_container {\n  height: 250px;\n  position: relative;\n}\n\n#chat-messages {\n  width: 100%;\n  padding-left: 0;\n  margin: 0;\n  display: flex;\n  flex-direction: column-reverse;\n  list-style-type: none;\n  overflow-y: auto;\n  height: 250px;\n  transition: transform 0.3s ease-in-out;\n}\n.chat_container:before {\n  content: \"\";\n  position: absolute;\n  width: 100%;\n  height: 50%;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(255, 255, 255, 1));\n  z-index: 1; /* 내용 위에 적용되도록 */\n}\n#chat-messages li {\n  margin-bottom: 5px;\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n.input_form{\n  display: flex;\n\n}\n\n#user_name{\n  width: 20%;\n}\n#user_message{\n  width: 75%;\n}\n.chating {\n  opacity: 0;\n  transform: translateY(20px);\n  transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;\n}\n.submit{\n  width: 50px;\n  height: 50px;\n  background-image: url(\"/src/assets/arrow-line.png\");\n  background-repeat : no-repeat;\n  background-position : center;\n  \n}\n.chating.active {\n  opacity: 1;\n  transform: translateY(0);\n}\n</style>"],"mappings":"AAmBA,OAAOA,EAAC,MAAO,kBAAkB;AACjC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE,EAAE;MAChBC,aAAa,EAAE,EAAE;MACjBC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,cAAcA,CAAA,EAAG;MACf,IAAI,CAACF,MAAK,GAAIN,EAAE,CAAC,gBAAgB,CAAC;MAElC,IAAI,CAACM,MAAM,CAACG,EAAE,CAAC,iBAAiB,EAAGD,cAAc,IAAK;QACpD,IAAI,CAACN,QAAO,GAAIM,cAAc,CAACE,GAAG,CAAEC,OAAO,KAAM;UAAE,GAAGA,OAAO;UAAEC,MAAM,EAAE,IAAI;UAAEC,EAAE,EAAEC,QAAQ,CAAC;QAAE,CAAC,CAAC,CAAC;MACjG,CAAC,CAAC;IACJ,CAAC;IACDC,aAAaA,CAAA,EAAG;MACd,IAAI,IAAI,CAACX,aAAa,CAACY,IAAI,CAAC,KAAK,EAAE,EAAE;QACnC,IAAI,CAACX,QAAO,GAAI,IAAI,CAACD,aAAa;QAClC;QACA,IAAI,CAAC,IAAI,CAACa,mBAAmB,EAAE;UAC7B,IAAI,CAACA,mBAAkB,GAAKhB,IAAI,IAAK;YACnC,IAAI,CAACC,QAAQ,CAACgB,OAAO,CAAC;cAAE,GAAGjB,IAAI;cAAEW,MAAM,EAAE,IAAI;cAAEC,EAAE,EAAEC,QAAQ,CAAC;YAAE,CAAC,CAAC;YAChE,IAAI,CAACK,SAAS,CAAC,CAAC;UAClB,CAAC;UAED,IAAI,CAACb,MAAM,CAACG,EAAE,CAAC,cAAc,EAAE,IAAI,CAACQ,mBAAmB,CAAC;QAC1D;QACA,IAAI,CAACX,MAAM,CAACc,IAAI,CAAC,UAAU,EAAE,IAAI,CAACf,QAAQ,CAAC;QAC3C,IAAI,CAACgB,WAAW,CAAC,CAAC;MACpB,OAAO,IAAI,IAAI,CAACjB,aAAa,CAACY,IAAI,CAAC,KAAK,EAAE,EAAE;QAC1CM,KAAK,CAAC,cAAc,CAAC;MACvB;IACF,CAAC;IACDD,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAAClB,YAAY,CAACa,IAAI,CAAC,KAAK,EAAC,IAAK,IAAI,CAACX,QAAQ,CAACW,IAAI,CAAC,KAAK,EAAE,EAAE;QAChE,IAAI,CAACV,MAAM,CAACc,IAAI,CAAC,cAAc,EAAE;UAAET,OAAO,EAAE,IAAI,CAACR,YAAY;UAAEE,QAAQ,EAAE,IAAI,CAACA,QAAQ;UAAEQ,EAAE,EAAEC,QAAQ,CAAC;QAAE,CAAC,CAAC;QACzG,IAAI,CAACX,YAAW,GAAI,EAAE;QACtB,IAAI,CAACC,aAAY,GAAI,EAAE;MACzB,OAAO,IAAI,IAAI,CAACD,YAAY,CAACa,IAAI,CAAC,KAAK,EAAE,EAAE;QACzCM,KAAK,CAAC,aAAa,CAAC;MACtB;IAEF,CAAC;IACDH,SAASA,CAAA,EAAG;MACV,IAAII,GAAE,GAAIC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC;MAClDF,GAAG,CAACG,SAAQ,GAAIH,GAAG,CAACI,YAAY;IAClC;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACpB,cAAc,CAAC,CAAC;EACvB;AACF,CAAC;AAED,SAASM,QAAQA,CAAA,EAAG;EAClB,OAAO,GAAE,GAAIe,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;AACtD"},"metadata":{},"sourceType":"module","externalDependencies":[]}