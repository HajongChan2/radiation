{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, TransitionGroup as _TransitionGroup, withCtx as _withCtx, createVNode as _createVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"col-12 container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h2\", {\n  class: \"header\"\n}, \"실시간 댓글\", -1);\nconst _hoisted_3 = {\n  class: \"col-12 chat_container\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"btn btn-primary submit\",\n  type: \"submit\"\n}, null, -1);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_createVNode(_TransitionGroup, {\n    name: \"list\",\n    id: \"chat-messages\",\n    tag: \"ul\"\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, message => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: message.id,\n        class: _normalizeClass([\"col-12 chating\", {\n          'active': message.active\n        }])\n      }, [_createElementVNode(\"strong\", null, _toDisplayString(message.username) + \":\", 1), _createTextVNode(\" \" + _toDisplayString(message.message), 1)], 2);\n    }), 128))]),\n    _: 1\n  })]), _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.enterUsername && $options.enterUsername(...args), [\"prevent\"])),\n    class: \"input_form\"\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.usernameInput = $event),\n    type: \"text\",\n    autocomplete: \"off\",\n    class: \"form-control\",\n    id: \"user_name\",\n    placeholder: \"Username\",\n    \"aria-label\": \"Username\"\n  }, null, 512), [[_vModelText, $data.usernameInput]]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.messageInput = $event),\n    type: \"text\",\n    id: \"user_message\",\n    autocomplete: \"off\",\n    class: \"form-control\",\n    placeholder: \"Usermessage\",\n    \"aria-label\": \"Usermessage\"\n  }, null, 512), [[_vModelText, $data.messageInput]]), _hoisted_4], 32)]);\n}","map":{"version":3,"names":["class","_createElementVNode","type","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_createVNode","_TransitionGroup","name","id","tag","_Fragment","_renderList","$data","messages","message","key","_normalizeClass","active","_toDisplayString","username","onSubmit","_cache","_withModifiers","args","$options","enterUsername","usernameInput","$event","autocomplete","placeholder","messageInput","_hoisted_4"],"sources":["/Users/jongchanha/Desktop/vuemain/radiation/radiation/src/components/UserComment.vue"],"sourcesContent":["<template>\n  <div class=\"col-12 container\">\n    <h2 class=\"header\">실시간 댓글</h2>\n    <div class=\"col-12 chat_container\">\n      <TransitionGroup name=\"list\" id=\"chat-messages\" tag=\"ul\">\n        <li v-for=\"message in messages\" :key=\"message.id\" class=\"col-12 chating\" :class=\"{ 'active': message.active }\">\n          <strong>{{ message.username }}:</strong> {{ message.message }}\n        </li>\n      </TransitionGroup>\n    </div>\n    <form @submit.prevent=\"enterUsername\" class=\"input_form\">\n      <input v-model=\"usernameInput\" type=\"text\" autocomplete=\"off\" class=\"form-control\" id=\"user_name\" placeholder=\"Username\" aria-label=\"Username\">\n      <input v-model=\"messageInput\" type=\"text\" id=\"user_message\" autocomplete=\"off\" class=\"form-control\" placeholder=\"Usermessage\" aria-label=\"Usermessage\">\n      <button class=\"btn btn-primary submit\" type=\"submit\"></button>\n    </form>\n  </div>\n</template>\n  \n<script>\nimport io from 'socket.io-client';\nexport default {\n  data() {\n    return {\n      messages: [],\n      messageInput: '',\n      usernameInput: '',\n      username: '',\n      socket: null\n    };\n  },\n  methods: {\n    beforeMessages() {\n      this.socket = io('localhost:3000');\n\n      this.socket.on('before messages', (beforeMessages) => {\n        this.messages = beforeMessages.map((message) => ({ ...message, active: true, id: uniqueId() }));\n      });\n    },\n    enterUsername() {\n      if (this.usernameInput.trim() != '') {\n        this.username = this.usernameInput;\n        // 최초 한 번만 리스너 등록\n        if (!this.chatMessageListener) {\n          this.chatMessageListener = (data) => {\n            this.messages.unshift({ ...data, active: true, id: uniqueId() });\n            this.msgBottom();\n          };\n\n          this.socket.on('chat message', this.chatMessageListener);\n        }\n        this.socket.emit('new user', this.username);\n        this.sendMessage();\n      } else if (this.usernameInput.trim() == '') {\n        alert(\"닉네임을 입력해주세요.\");\n      }\n    },\n    sendMessage() {\n      if (this.messageInput.trim() != '' && this.username.trim() != '') {\n        this.socket.emit('chat message', { message: this.messageInput, username: this.username, id: uniqueId() });\n        this.messageInput = '';\n        this.usernameInput = '';\n      } else if (this.messageInput.trim() == '') {\n        alert(\"내용을 입력해주세요.\");\n      }\n\n    },\n    msgBottom() {\n      let div = document.getElementById(\"chat-messages\");\n      div.scrollTop = div.scrollHeight;\n    },\n  },\n  mounted() {\n    this.beforeMessages();\n  }\n};\n\nfunction uniqueId() {\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n</script>\n  \n   \n<style>\n.list-move,\n/* 움직이는 엘리먼트에 트랜지션 적용 */\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.5s ease;\n}\n\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n\n.list-leave-active {\n  position: absolute;\n}\n.container{\n  margin-top: 100px;\n}\n.header {\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n#chat-messages::-webkit-scrollbar {\n  width: 10px;\n}\n\n#chat-messages::-webkit-scrollbar-thumb {\n  background: rgb(6, 46, 156);\n  /* 스크롤바 색상 */\n  border-radius: 10px;\n  /* 스크롤바 둥근 테두리 */\n}\n\n#chat-messages::-webkit-scrollbar-track {\n  background: rgba(220, 20, 60, .1);\n  /*스크롤바 뒷 배경 색상*/\n}\n\n.chat_container {\n  height: 250px;\n  position: relative;\n}\n\n#chat-messages {\n  width: 100%;\n  padding-left: 0;\n  margin: 0;\n  display: flex;\n  flex-direction: column-reverse;\n  list-style-type: none;\n  overflow-y: auto;\n  height: 250px;\n  transition: transform 0.3s ease-in-out;\n}\n.chat_container:before {\n  content: \"\";\n  position: absolute;\n  width: 100%;\n  height: 50%;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(255, 255, 255, 1));\n  z-index: 1; /* 내용 위에 적용되도록 */\n}\n#chat-messages li {\n  margin-bottom: 5px;\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n.input_form{\n  display: flex;\n\n}\n\n#user_name{\n  width: 20%;\n}\n#user_message{\n  width: 75%;\n}\n.chating {\n  opacity: 0;\n  transform: translateY(20px);\n  transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;\n}\n.submit{\n  width: 50px;\n  height: 50px;\n  background-image: url(\"/src/assets/arrow-line.png\");\n  background-repeat : no-repeat;\n  background-position : center;\n  \n}\n.chating.active {\n  opacity: 1;\n  transform: translateY(0);\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAkB;gCAC3BC,mBAAA,CAA8B;EAA1BD,KAAK,EAAC;AAAQ,GAAC,QAAM;;EACpBA,KAAK,EAAC;AAAuB;gCAUhCC,mBAAA,CAA8D;EAAtDD,KAAK,EAAC,wBAAwB;EAACE,IAAI,EAAC;;;uBAZhDC,mBAAA,CAcM,OAdNC,UAcM,GAbJC,UAA8B,EAC9BJ,mBAAA,CAMM,OANNK,UAMM,GALJC,YAAA,CAIkBC,gBAAA;IAJDC,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,eAAe;IAACC,GAAG,EAAC;;sBAC9C,MAA2B,E,kBAA/BR,mBAAA,CAEKS,SAAA,QAAAC,WAAA,CAFiBC,KAAA,CAAAC,QAAQ,EAAnBC,OAAO;2BAAlBb,mBAAA,CAEK;QAF4Bc,GAAG,EAAED,OAAO,CAACN,EAAE;QAAEV,KAAK,EAAAkB,eAAA,EAAC,gBAAgB;UAAA,UAAqBF,OAAO,CAACG;QAAM;UACzGlB,mBAAA,CAAwC,gBAAAmB,gBAAA,CAA7BJ,OAAO,CAACK,QAAQ,IAAG,GAAC,M,iBAAS,GAAC,GAAAD,gBAAA,CAAGJ,OAAO,CAACA,OAAO,M;;;QAIjEf,mBAAA,CAIO;IAJAqB,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;IAAEzB,KAAK,EAAC;sBAC1CC,mBAAA,CAA+I;+DAA/Ha,KAAA,CAAAc,aAAa,GAAAC,MAAA;IAAE3B,IAAI,EAAC,MAAM;IAAC4B,YAAY,EAAC,KAAK;IAAC9B,KAAK,EAAC,cAAc;IAACU,EAAE,EAAC,WAAW;IAACqB,WAAW,EAAC,UAAU;IAAC,YAAU,EAAC;gCAApHjB,KAAA,CAAAc,aAAa,E,mBAC7B3B,mBAAA,CAAuJ;+DAAvIa,KAAA,CAAAkB,YAAY,GAAAH,MAAA;IAAE3B,IAAI,EAAC,MAAM;IAACQ,EAAE,EAAC,cAAc;IAACoB,YAAY,EAAC,KAAK;IAAC9B,KAAK,EAAC,cAAc;IAAC+B,WAAW,EAAC,aAAa;IAAC,YAAU,EAAC;gCAAzHjB,KAAA,CAAAkB,YAAY,E,GAC5BC,UAA8D,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}